// CPU
// /proc/stat
pub(super) const USER_USAGE: &str = "user_usage";
pub(super) const NICE_USAGE: &str = "nice_usage";
pub(super) const SYSTEM_USAGE: &str = "system_usage";
pub(super) const IDLE_USAGE: &str = "idle_usage";
pub(super) const IO_WAIT_USAGE: &str = "iowait_usage";
pub(super) const IRQ_USAGE: &str = "irq_usage";
pub(super) const SOFT_IRQ_USAGE: &str = "softirq_usage";
pub(super) const STEAL_USAGE: &str = "steal_usage";
pub(super) const GUEST_USAGE: &str = "guest_usage";
pub(super) const GUEST_NICE_USAGE: &str = "guest_nice_usage";
pub(super) const CONTEXT_SWITCHES: &str = "context_switches";
pub(super) const BOOT_TIME: &str = "boot_time";
pub(super) const PROCESSES: &str = "processes";
pub(super) const PROCS_RUNNING: &str = "procs_running";
pub(super) const PROCS_BLOCKED: &str = "procs_blocked";

// Memory
// /proc/meminfo
pub(super) const MEM_TOTAL: &str = "MemTotal";
pub(super) const MEM_FREE: &str = "MemFree";
pub(super) const MEM_AVAILABLE: &str = "MemAvailable";
pub(super) const BUFFERS: &str = "Buffers";
pub(super) const CACHED: &str = "Cached";
pub(super) const SWAP_CACHED: &str = "SwapCached";
pub(super) const ACTIVE: &str = "Active";
pub(super) const INACTIVE: &str = "Inactive";
pub(super) const ACTIVE_ANON: &str = "Active(anon)";
pub(super) const INACTIVE_ANON: &str = "Inactive(anon)";
pub(super) const ACTIVE_FILE: &str = "Active(file)";
pub(super) const INACTIVE_FILE: &str = "Inactive(file)";
pub(super) const SWAP_TOTAL: &str = "SwapTotal";
pub(super) const SWAP_FREE: &str = "SwapFree";
pub(super) const DIRTY: &str = "Dirty";
pub(super) const WRITEBACK: &str = "Writeback";
pub(super) const ANON_PAGES: &str = "AnonPages";
pub(super) const MAPPED: &str = "Mapped";
pub(super) const SHMEM: &str = "Shmem";
pub(super) const KRECLAIMABLE: &str = "KReclaimable";
pub(super) const SLAB: &str = "Slab";
pub(super) const SRECLAIMABLE: &str = "SReclaimable";
pub(super) const SUNRECLAIM: &str = "Sunreclaim";
pub(super) const KERNEL_STACK: &str = "KernelStack";
pub(super) const PAGE_TABLES: &str = "PageTables";
pub(super) const NFS_UNSTABLE: &str = "NFS_Unstable";
pub(super) const BOUNCE: &str = "Bounce";
pub(super) const WRITEBACK_TMP: &str = "WritebackTmp";
pub(super) const COMMIT_LIMIT: &str = "CommitLimit";
pub(super) const COMMITTED_AS: &str = "Committed_AS";
pub(super) const VMALLOC_TOTAL: &str = "VmallocTotal";
pub(super) const VMALLOC_USED: &str = "VmallocUsed";
pub(super) const VMALLOC_CHUNK: &str = "VmallocChunk";
// /proc/vmstat
pub(super) const NR_FREE_PAGES: &str = "nr_free_pages";
pub(super) const NR_INACTIVE_ANON: &str = "nr_inactive_anon";
pub(super) const NR_ACTIVE_ANON: &str = "nr_active_anon";
pub(super) const NR_INACTIVE_FILE: &str = "nr_inactive_file";
pub(super) const NR_ACTIVE_FILE: &str = "nr_active_file";
pub(super) const NR_UNEVICTABLE: &str = "nr_unevictable";
pub(super) const NR_MLOCK: &str = "nr_mlock";
pub(super) const NR_ANON_PAGES: &str = "nr_anon_pages";
pub(super) const NR_MAPPED: &str = "nr_mapped";
pub(super) const NR_FILE_PAGES: &str = "nr_file_pages";
pub(super) const NR_DIRTY: &str = "nr_dirty";
pub(super) const NR_WRITEBACK: &str = "nr_writeback";
pub(super) const NR_SLAB_RECLAIMABLE: &str = "nr_slab_reclaimable";
pub(super) const NR_SLAB_UNRECLAIMABLE: &str = "nr_slab_unreclaimable";
pub(super) const NR_PAGE_TABLE_PAGES: &str = "nr_page_table_pages";
pub(super) const NR_KERNEL_STACK: &str = "nr_kernel_stack";
pub(super) const NR_UNSTABLE: &str = "nr_unstable";
pub(super) const NR_BOUNCE: &str = "nr_bounce";
pub(super) const NR_VMSCAN_WRITE: &str = "nr_vmscan_write";
pub(super) const NR_VMSCAN_IMMEDIATE_RECLAIM: &str = "nr_vmscan_immediate_reclaim";
pub(super) const NR_WRITEBACK_TEMP: &str = "nr_writeback_temp";
pub(super) const NR_ISOLATED_ANON: &str = "nr_isolated_anon";
pub(super) const NR_ISOLATED_FILE: &str = "nr_isolated_file";
pub(super) const NR_SHMEM: &str = "nr_shmem";
pub(super) const NR_DIRTIED: &str = "nr_dirtied";
pub(super) const NR_WRITTEN: &str = "nr_written";
pub(super) const NUMA_HIT: &str = "numa_hit";
pub(super) const NUMA_MISS: &str = "numa_miss";
pub(super) const NUMA_FOREIGN: &str = "numa_foreign";
pub(super) const NUMA_INTERLEAVE: &str = "numa_interleave";
pub(super) const NUMA_LOCAL: &str = "numa_local";
pub(super) const NUMA_OTHER: &str = "numa_other";
pub(super) const WORKINGSET_NODERECLAIM: &str = "workingset_nodereclaim";
pub(super) const NR_ANON_TRANSPARENT_HUGEPAGES: &str = "nr_anon_transparent_hugepages";
pub(super) const NR_FREE_CMA: &str = "nr_free_cma";
pub(super) const NR_DIRTY_THRESHOLD: &str = "nr_dirty_threshold";
pub(super) const NR_DIRTY_BACKGROUND_THRESHOLD: &str = "nr_dirty_background_threshold";
pub(super) const PGPGIN: &str = "pgpgin";
pub(super) const PGPGOUT: &str = "pgpgout";
pub(super) const PSWPIN: &str = "pswpin";
pub(super) const PSWPOUT: &str = "pswpout";
pub(super) const PGALLOC_DMA: &str = "pgalloc_dma";
pub(super) const PGALLOC_DMA32: &str = "pgalloc_dma32";
pub(super) const PGALLOC_NORMAL: &str = "pgalloc_normal";
pub(super) const PGALLOC_MOVABLE: &str = "pgalloc_movable";
pub(super) const PGFREE: &str = "pgfree";
pub(super) const PGACTIVATE: &str = "pgactivate";
pub(super) const PGDEACTIVATE: &str = "pgdeactivate";
pub(super) const PGFAULT: &str = "pgfault";
pub(super) const PGMAJFAULT: &str = "pgmajfault";
pub(super) const PGSCAN_DIRECT_THROTTLE: &str = "pgscan_direct_throttle";
pub(super) const PGINODESTEAL: &str = "pginodesteal";
pub(super) const SLABS_SCANNED: &str = "slabs_scanned";
pub(super) const KSWAPD_INODESTEAL: &str = "kswapd_inodesteal";
pub(super) const KSWAPD_LOW_WMARK_HIT_QUICKLY: &str = "kswapd_low_wmark_hit_quickly";
pub(super) const KSWAPD_HIGH_WMARK_HIT_QUICKLY: &str = "kswapd_high_wmark_hit_quickly";
pub(super) const PAGEOUTRUN: &str = "pageoutrun";
pub(super) const PGROTATED: &str = "pgrotated";
pub(super) const DROP_PAGECACHE: &str = "drop_pagecache";
pub(super) const DROP_SLAB: &str = "drop_slab";
pub(super) const NUMA_PTE_UPDATES: &str = "numa_pte_updates";
pub(super) const NUMA_HUGE_PTE_UPDATES: &str = "numa_huge_pte_updates";
pub(super) const NUMA_HINT_FAULTS: &str = "numa_hint_faults";
pub(super) const NUMA_HINT_FAULTS_LOCAL: &str = "numa_hint_faults_local";
pub(super) const NUMA_PAGES_MIGRATED: &str = "numa_pages_migrated";
pub(super) const PGMIGRATE_SUCCESS: &str = "pgmigrate_success";
pub(super) const PGMIGRATE_FAIL: &str = "pgmigrate_fail";
pub(super) const COMPACT_MIGRATE_SCANNED: &str = "compact_migrate_scanned";
pub(super) const COMPACT_FREE_SCANNED: &str = "compact_free_scanned";
pub(super) const COMPACT_ISOLATED: &str = "compact_isolated";
pub(super) const COMPACT_STALL: &str = "compact_stall";
pub(super) const COMPACT_FAIL: &str = "compact_fail";
pub(super) const COMPACT_SUCCESS: &str = "compact_success";
pub(super) const HTLB_BUDDY_ALLOC_SUCCESS: &str = "htlb_buddy_alloc_success";
pub(super) const HTLB_BUDDY_ALLOC_FAIL: &str = "htlb_buddy_alloc_fail";
pub(super) const UNEVICTABLE_PGS_CULLED: &str = "unevictable_pgs_culled";
pub(super) const UNEVICTABLE_PGS_SCANNED: &str = "unevictable_pgs_scanned";
pub(super) const UNEVICTABLE_PGS_RESCUED: &str = "unevictable_pgs_rescued";
pub(super) const UNEVICTABLE_PGS_MLOCKED: &str = "unevictable_pgs_mlocked";
pub(super) const UNEVICTABLE_PGS_MUNLOCKED: &str = "unevictable_pgs_munlocked";
pub(super) const UNEVICTABLE_PGS_CLEARED: &str = "unevictable_pgs_cleared";
pub(super) const UNEVICTABLE_PGS_STRANDED: &str = "unevictable_pgs_stranded";
pub(super) const THP_FAULT_ALLOC: &str = "thp_fault_alloc";
pub(super) const THP_FAULT_FALLBACK: &str = "thp_fault_fallback";
pub(super) const THP_COLLAPSE_ALLOC: &str = "thp_collapse_alloc";
pub(super) const THP_COLLAPSE_ALLOC_FAILED: &str = "thp_collapse_alloc_failed";
pub(super) const THP_ZERO_PAGE_ALLOC: &str = "thp_zero_page_alloc";
pub(super) const THP_ZERO_PAGE_ALLOC_FAILED: &str = "thp_zero_page_alloc_failed";
pub(super) const BALLOON_INFLATE: &str = "balloon_inflate";
pub(super) const BALLOON_DEFLATE: &str = "balloon_deflate";
pub(super) const BALLOON_MIGRATE: &str = "balloon_migrate";

// Disk
// /proc/diskstats
pub(super) const MAJOR: &str = "major";
pub(super) const MINOR: &str = "minor";
pub(super) const DEVICE_NAME: &str = "name";
pub(super) const READ_COMPLETED: &str = "read_completed";
pub(super) const READ_MERGED: &str = "read_merged";
pub(super) const SECTORS_READ: &str = "sectors_read";
pub(super) const READ_TIME: &str = "read_time";
pub(super) const WRITE_COMPLETED: &str = "write_completed";
pub(super) const WRITE_MERGED: &str = "write_merged";
pub(super) const SECTORS_WRITTEN: &str = "sectors_written";
pub(super) const WRITING_TIME: &str = "writing_time";
pub(super) const IOS_IN_PROGRESS: &str = "ios_in_progress";
pub(super) const IO_TIME: &str = "io_time";
pub(super) const WEIGHTED_IO_TIME: &str = "weighted_io_time";
pub(super) const DISCARD_COMPLETED: &str = "discard_completed";
pub(super) const DISCARD_MERGED: &str = "discard_merged";
pub(super) const SECTORS_DISCARDED: &str = "sectors_discarded";
pub(super) const DISCARDING_TIME: &str = "discarding_time";
pub(super) const FLUSH_COMPLETED: &str = "flush_completed";
pub(super) const FLUSHING_TIME: &str = "flushing_time";

// Network
// /proc/net/dev
pub(super) const INTERFACE_NAME: &str = "interface_name";
pub(super) const RX_BYTES: &str = "rx_bytes";
pub(super) const RX_PACKETS: &str = "rx_packets";
pub(super) const RX_ERRORS: &str = "rx_errors";
pub(super) const RX_DROPPED: &str = "rx_dropped";
pub(super) const RX_FIFO: &str = "rx_fifo";
pub(super) const RX_FRAME: &str = "rx_frame";
pub(super) const RX_COMPRESSED: &str = "rx_compressed";
pub(super) const RX_MULTICAST: &str = "rx_multicast";
pub(super) const TX_BYTES: &str = "tx_bytes";
pub(super) const TX_PACKETS: &str = "tx_packets";
pub(super) const TX_ERRORS: &str = "tx_errors";
pub(super) const TX_DROPPED: &str = "tx_dropped";
pub(super) const TX_FIFO: &str = "tx_fifo";
pub(super) const TX_COLLS: &str = "tx_colls";
pub(super) const TX_CARRIER: &str = "tx_carrier";
pub(super) const TX_COMPRESSED: &str = "tx_compressed";
